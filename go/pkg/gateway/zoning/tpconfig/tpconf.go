package tpconfig

import (
	"io"
	"time"

	"github.com/scionproto/scion/go/lib/config"
	"github.com/scionproto/scion/go/lib/util"
)

// TPConf contains the configuration specific to the zone translation point.
type TPConf struct {
	AuthConf  AuthConf  `toml:"auth_module,omitempty"`
	TransConf TransConf `toml:"transition_module,omitempty"`
}

// InitDefaults sets the default values to unset values.
func (cfg *TPConf) InitDefaults() {
	cfg.AuthConf.InitDefaults()
	cfg.TransConf.InitDefaults()
}

func (cfg *TPConf) Sample(dst io.Writer, path config.Path, m config.CtxMap) {
	config.WriteString(dst, tpSample)
}

func (cfg *TPConf) ConfigName() string {
	return "tp"
}

// AuthConf configures the authentication module
type AuthConf struct {
	// the cert key file path
	Key string `toml:"key,omitempty"`
	// the cert pem file path
	Cert string `toml:"cert,omitempty"`
	// the length of the keys to to be generated by the key manager
	KeyLength int `toml:"key_length,omitempty"`
	// the time for which a key is used before a fresh key is derived/fetched
	KeyTTL util.DurWrap `toml:"key_ttl,omitempty"`
	// the interval at which outdated keys are purged from the store
	KeyPurgeInterval util.DurWrap `toml:"key_purge_interval,omitempty"`
	// the maximum time difference accepted by the auth module
	MaxTimeDiff util.DurWrap `toml:"max_time_diff,omitempty"`
	// the port on which the key server listens
	ServerPort int `toml:"server_port,omitempty"`
}

// InitDefaults sets the default values to unset values.
func (cfg *AuthConf) InitDefaults() {
	if cfg.KeyLength == 0 {
		cfg.KeyLength = 16
	}
	if cfg.KeyTTL.Duration == 0 {
		cfg.KeyTTL.Duration = 24 * time.Hour
	}
	if cfg.KeyPurgeInterval.Duration == 0 {
		cfg.KeyPurgeInterval.Duration = 24 * time.Hour
	}
	if cfg.MaxTimeDiff.Duration == 0 {
		cfg.MaxTimeDiff.Duration = 1 * time.Second
	}
	if cfg.ServerPort == 0 {
		cfg.ServerPort = 9090
	}
}

// TransConf configures the transition module
type TransConf struct {
	// the interval at which fresh information is pulled from the controller
	RefrehInterval util.DurWrap `toml:"refresh_interval,omitempty"`
	// the address of the controller
	ControllerAddr string `toml:"controller_addr,omitempty"`
}

// InitDefaults sets the default values to unset values.
func (cfg *TransConf) InitDefaults() {
	if cfg.RefrehInterval.Duration == 0 {
		cfg.RefrehInterval.Duration = 5 * time.Second
	}
}
